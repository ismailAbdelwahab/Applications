#!/usr/bin/env python3
import tkinter as tk
import random
import time
import threading
class Application(tk.Frame):
	WINDOW_DIMENSION = "800x600"

	def __init__(self, master=None, array=None):
		self.array = array
		self.old_array = array

		master.geometry( self.WINDOW_DIMENSION )
		super().__init__(master)
		self.master = master
		self.pack()

		self.create_canvas()
		self.fill_canvas()

		self.create_buttons()

	def create_canvas(self):
		self.canvas = tk.Canvas(self.master, bg="black", width=600, height=400)
		self.canvas.pack(side="top")

	def fill_canvas(self, i=-1, j=-1):
		PADDING = 3
		c_width = int(self.canvas['width'])
		c_heigth = int(self.canvas['height'])

		block_width = c_width // len(array)
		block_heigth = c_heigth // max(array)

		for index, num in enumerate(array):
			color = 'white' if index != i else 'red'
			color = color if index != j else 'green'
			x1 = PADDING + index * block_width      ; y1 = c_heigth - num*block_heigth
			x2 = PADDING + (index+1) * block_width  ; y2 = c_heigth - 20 
			self.canvas.create_rectangle(x1,y1, x2,y2, fill=color)

	def redraw(self, i=-1, j=-1):
		self.clear_canvas()
		self.fill_canvas(i, j)
	def clear_canvas(self):
		self.canvas.delete('all')

	def shuffle_array(self):
		random.shuffle(self.array)
		self.clear_canvas()
		self.fill_canvas()

	def create_buttons(self):
		bubble_sort_button= tk.Button(self, text="Bubble sort", fg="purple",
			command= lambda : threading.Thread(target=bubble_sort, args=[self, self.array]).start())
		bubble_sort_button.pack(side="bottom")
		suffle_array_button = tk.Button(self, text="Shuffle the array", fg="black",command=self.shuffle_array)
		suffle_array_button.pack(side="bottom")
		fill_canvas_button = tk.Button(self, text="Show bars", fg="green",command=self.fill_canvas)
		fill_canvas_button.pack(side="bottom")
		clear_canvas_button = tk.Button(self, text="Hide bars", fg="red",command=self.clear_canvas)
		clear_canvas_button.pack(side="bottom")
		self.quit = tk.Button(self, text="QUIT", fg="red",command=self.master.destroy)
		self.quit.pack(side="bottom")

def is_sorted(array):
	for i in range( len(array)-1 ):
		if array[i] > array[i+1]: return False
	return True

def bubble_sort(app, array):
	print("Bubble sort launched")
	while not is_sorted(array):
		for i in range( len(array)-1 ):
			if array[i] > array[i+1]:
				swap_elements( app, array, i, i+1 )
	print("End of Bubble sort")

def swap_elements(app, array, i, j):
	array[i], array[j] = array[j], array[i]
	app.after( 2, lambda : app.redraw(j, i))
	time.sleep(0.02)

if __name__ == '__main__':
	root = tk.Tk()
	array = [x for x in range(1,100)]
	app = Application(master=root, array=array)

	app.mainloop()